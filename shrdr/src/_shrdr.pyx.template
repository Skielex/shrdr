# distutils: language = c++

from libc.stdint cimport int8_t, int16_t, int32_t, uint32_t, int64_t, uint64_t
from libcpp cimport bool
from .src._shrdr cimport BlockIdx, NodeLabel, Qpbo, ParallelQpbo, Bk, ParallelBk

cimport cython

ctypedef int16_t CapInt16
ctypedef int32_t CapInt32
ctypedef int64_t CapInt64
ctypedef float CapFloat32
ctypedef double CapFloat64
ctypedef uint32_t ArcIdxUInt32
ctypedef uint64_t ArcIdxUInt64
ctypedef uint32_t NodeIdxUInt32
ctypedef uint64_t NodeIdxUInt64
ctypedef int64_t FlowInt
ctypedef double FlowFloat

<template>
cdef class Qpbo<ClassNameExt>:
    cdef Qpbo[<CapType>, <FlowType>, <ArcType>, <NodeType>]* c_qpbo

    def __cinit__(self, size_t expected_nodes=0, size_t expected_pairwise_terms=0, bool expect_nonsubmodular=True):
        self.c_qpbo = new Qpbo[<CapType>, <FlowType>, <ArcType>, <NodeType>](expected_nodes, expected_pairwise_terms, expect_nonsubmodular)

    def __dealloc__(self):
        del self.c_qpbo

    def add_node(self, size_t num):
        return self.c_qpbo.add_node(num)

    def add_unary_term(self, <NodeType> i, <CapType> e0, <CapType> e1):
        self.c_qpbo.add_unary_term(i, e0, e1)

    @cython.boundscheck(False)
    @cython.wraparound(False)
    def add_unary_terms(self, <NodeType>[::1] i, <CapType>[::1] e0, <CapType>[::1] e1):
        cdef Py_ssize_t length = i.shape[0]

        assert i.shape[0] == e0.shape[0] == e1.shape[0]

        for n in range(length):
            self.c_qpbo.add_unary_term(i[n], e0[n], e1[n])

    def add_pairwise_term(self, <NodeType> i, <NodeType> j, <CapType> e00, <CapType> e01, <CapType> e10, <CapType> e11):
        self.c_qpbo.add_pairwise_term(i, j, e00, e01, e10, e11)

    @cython.boundscheck(False)
    @cython.wraparound(False)
    def add_pairwise_terms(self, <NodeType>[::1] i, <NodeType>[::1] j, <CapType>[::1] e00, <CapType>[::1] e01, <CapType>[::1] e10, <CapType>[::1] e11):
        cdef Py_ssize_t length = i.shape[0]

        assert i.shape[0] == j.shape[0] == e00.shape[0] == e01.shape[0] == e10.shape[0] == e11.shape[0]

        for n in range(length):
            self.c_qpbo.add_pairwise_term(i[n], j[n], e00[n], e01[n], e10[n], e11[n])

    def get_label(self, <NodeType> i):
        return self.c_qpbo.get_label(i)

    def compute_twice_energy(self):
        return self.c_qpbo.compute_twice_energy()

    def solve(self):
        self.c_qpbo.solve()

    def compute_weak_persistencies(self):
        self.c_qpbo.compute_weak_persistencies()
</template>

<template>
cdef class ParallelQpbo<ClassNameExt>:
    cdef ParallelQpbo[<CapType>, <FlowType>, <ArcType>, <NodeType>]* c_pqpbo

    def __cinit__(self, size_t expected_nodes=0, size_t expected_pairwise_terms=0, bool expect_nonsubmodular=True, size_t expected_blocks=0):
        self.c_pqpbo = new ParallelQpbo[<CapType>, <FlowType>, <ArcType>, <NodeType>](expected_nodes, expected_pairwise_terms, expect_nonsubmodular, expected_blocks)

    def __dealloc__(self):
        del self.c_pqpbo

    def add_node(self, size_t num, BlockIdx block=0):
        return self.c_pqpbo.add_node(num, block)

    def add_unary_term(self, <NodeType> i, <CapType> e0, <CapType> e1):
        self.c_pqpbo.add_unary_term(i, e0, e1)

    @cython.boundscheck(False)
    @cython.wraparound(False)
    def add_unary_terms(self, <NodeType>[::1] i, <CapType>[::1] e0, <CapType>[::1] e1):
        cdef Py_ssize_t length = i.shape[0]

        assert i.shape[0] == e0.shape[0] == e1.shape[0]

        for n in range(length):
            self.c_pqpbo.add_unary_term(i[n], e0[n], e1[n])

    def add_pairwise_term(self, <NodeType> i, <NodeType> j, <CapType> e00, <CapType> e01, <CapType> e10, <CapType> e11):
        self.c_pqpbo.add_pairwise_term(i, j, e00, e01, e10, e11)

    @cython.boundscheck(False)
    @cython.wraparound(False)
    def add_pairwise_terms(self, <NodeType>[::1] i, <NodeType>[::1] j, <CapType>[::1] e00, <CapType>[::1] e01, <CapType>[::1] e10, <CapType>[::1] e11):
        cdef Py_ssize_t length = i.shape[0]

        assert i.shape[0] == j.shape[0] == e00.shape[0] == e01.shape[0] == e10.shape[0] == e11.shape[0]

        for n in range(length):
            self.c_pqpbo.add_pairwise_term(i[n], j[n], e00[n], e01[n], e10[n], e11[n])

    def add_pairwise_terms_parallel(self, <NodeType>[::1] i, <NodeType>[::1] j, <CapType>[::1] e00, <CapType>[::1] e01, <CapType>[::1] e10, <CapType>[::1] e11):
        cdef Py_ssize_t length = i.shape[0]
        assert i.shape[0] == j.shape[0] == e00.shape[0] == e01.shape[0] == e10.shape[0] == e11.shape[0]

        self.c_pqpbo.add_pairwise_terms(length, &i[0], &j[0], &e00[0], &e01[0], &e10[0], &e11[0])

    def get_label(self, <NodeType> i):
        return self.c_pqpbo.get_label(i)

    def compute_twice_energy(self):
        return self.c_pqpbo.compute_twice_energy()

    def solve(self):
        self.c_pqpbo.solve()

    def compute_weak_persistencies(self):
        self.c_pqpbo.compute_weak_persistencies()

    def get_num_threads(self):
        return self.c_pqpbo.get_num_threads()

    def set_num_threads(self, unsigned int num):
        self.c_pqpbo.set_num_threads(num)
</template>

<template>
cdef class Bk<ClassNameExt>:
    cdef Bk[<CapType>, <TermType>, <FlowType>, <ArcType>, <NodeType>]* c_bk

    def __cinit__(self, size_t expected_nodes=0, size_t expected_pairwise_terms=0):
        self.c_bk = new Bk[<CapType>, <TermType>, <FlowType>, <ArcType>, <NodeType>](expected_nodes, expected_pairwise_terms)

    def __dealloc__(self):
        del self.c_bk

    def add_node(self, size_t num):
        return self.c_bk.add_node(num)

    def add_tweight(self, <NodeType> i, <TermType> cap_source, <TermType> cap_sink):
        self.c_bk.add_tweight(i, cap_source, cap_sink)

    @cython.boundscheck(False)
    @cython.wraparound(False)
    def add_tweights(self, <NodeType>[::1] i, <TermType>[::1] cap_source, <TermType>[::1] cap_sink):
        cdef Py_ssize_t length = i.shape[0]

        assert i.shape[0] == cap_source.shape[0] == cap_sink.shape[0]

        for n in range(length):
            self.c_bk.add_tweight(i[n], cap_source[n], cap_sink[n])

    def add_edge(self, <NodeType> i, <NodeType> j, <CapType> cap, <CapType> rev_cap, bool merge_duplicates=False):
        self.c_bk.add_edge(i, j, cap, rev_cap, merge_duplicates)

    @cython.boundscheck(False)
    @cython.wraparound(False)
    def add_edges(self, <NodeType>[::1] i, <NodeType>[::1] j, <CapType>[::1] cap, <CapType>[::1] rev_cap, bool merge_duplicates=False):
        cdef Py_ssize_t length = i.shape[0]

        assert i.shape[0] == j.shape[0] == cap.shape[0] == rev_cap.shape[0]

        for n in range(length):
            self.c_bk.add_edge(i[n], j[n], cap[n], rev_cap[n], merge_duplicates)

    def maxflow(self, bool reuse_trees=False):
        return self.c_bk.maxflow(reuse_trees)

    def get_maxflow(self):
        return self.c_bk.get_maxflow()

    def what_segment(self, <NodeType> i, NodeLabel default_segment = NodeLabel.SOURCE):
        return self.c_bk.what_segment(i, default_segment)

    def mark_node(self, <NodeType> i):
        self.c_bk.mark_node(i)
</template>

<template>
cdef class ParallelBk<ClassNameExt>:
    cdef ParallelBk[<CapType>, <TermType>, <FlowType>, <ArcType>, <NodeType>]* c_pbk

    def __cinit__(self, size_t expected_nodes=0, size_t expected_pairwise_terms=0, size_t expected_blocks=0):
        self.c_pbk = new ParallelBk[<CapType>, <TermType>, <FlowType>, <ArcType>, <NodeType>](expected_nodes, expected_pairwise_terms, expected_blocks)

    def __dealloc__(self):
        del self.c_pbk

    def add_node(self, size_t num, BlockIdx block):
        return self.c_pbk.add_node(num, block)

    def add_tweight(self, <NodeType> i, <TermType> cap_source, <TermType> cap_sink):
        self.c_pbk.add_tweight(i, cap_source, cap_sink)

    @cython.boundscheck(False)
    @cython.wraparound(False)
    def add_tweights(self, <NodeType>[::1] i, <TermType>[::1] cap_source, <TermType>[::1] cap_sink):
        cdef Py_ssize_t length = i.shape[0]

        assert i.shape[0] == cap_source.shape[0] == cap_sink.shape[0]

        for n in range(length):
            self.c_pbk.add_tweight(i[n], cap_source[n], cap_sink[n])

    def add_edge(self, <NodeType> i, <NodeType> j, <CapType> cap, <CapType> rev_cap, bool merge_duplicates=False):
        self.c_pbk.add_edge(i, j, cap, rev_cap, merge_duplicates)

    @cython.boundscheck(False)
    @cython.wraparound(False)
    def add_edges(self, <NodeType>[::1] i, <NodeType>[::1] j, <CapType>[::1] cap, <CapType>[::1] rev_cap, bool merge_duplicates=False):
        cdef Py_ssize_t length = i.shape[0]

        assert i.shape[0] == j.shape[0] == cap.shape[0] == rev_cap.shape[0]

        for n in range(length):
            self.c_pbk.add_edge(i[n], j[n], cap[n], rev_cap[n], merge_duplicates)

    def maxflow(self):
        return self.c_pbk.maxflow()

    def what_segment(self, <NodeType> i, NodeLabel default_segment = NodeLabel.SOURCE):
        return self.c_pbk.what_segment(i, default_segment)

    def get_num_threads(self):
        return self.c_pbk.get_num_threads()

    def set_num_threads(self, unsigned int num):
        self.c_pbk.set_num_threads(num)
</template>
